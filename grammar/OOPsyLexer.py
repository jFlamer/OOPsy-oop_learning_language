# Generated from OOPsy.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,75,515,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
        1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,
        1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,4,7,
        191,8,7,11,7,12,7,192,1,8,4,8,196,8,8,11,8,12,8,197,1,8,1,8,4,8,
        202,8,8,11,8,12,8,203,1,9,1,9,1,9,1,9,3,9,210,8,9,1,9,1,9,1,10,1,
        10,1,10,1,10,5,10,218,8,10,10,10,12,10,221,9,10,1,10,1,10,1,11,1,
        11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,
        17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,
        22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,
        27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,
        31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,
        38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,41,5,41,301,8,41,10,
        41,12,41,304,9,41,1,42,1,42,1,42,1,42,5,42,310,8,42,10,42,12,42,
        313,9,42,1,42,1,42,1,42,1,42,1,42,1,43,4,43,321,8,43,11,43,12,43,
        322,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,
        1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,
        1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,
        1,54,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,
        1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,59,
        1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,
        1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,
        1,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,69,1,69,
        1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,
        1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,73,
        1,73,1,73,1,73,1,74,1,74,5,74,511,8,74,10,74,12,74,514,9,74,1,311,
        0,75,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
        46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,
        56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,
        131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,73,147,74,149,
        75,1,0,7,1,0,48,57,3,0,10,10,13,13,92,92,2,0,34,34,92,92,2,0,10,
        10,13,13,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,
        90,95,95,97,122,524,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,
        0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,
        0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,
        0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
        0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,
        0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
        0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
        0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,
        0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,
        0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,
        0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,
        1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,
        0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,
        0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,
        135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,
        0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,1,151,1,0,0,0,3,155,
        1,0,0,0,5,161,1,0,0,0,7,168,1,0,0,0,9,173,1,0,0,0,11,178,1,0,0,0,
        13,183,1,0,0,0,15,190,1,0,0,0,17,195,1,0,0,0,19,205,1,0,0,0,21,213,
        1,0,0,0,23,224,1,0,0,0,25,226,1,0,0,0,27,228,1,0,0,0,29,230,1,0,
        0,0,31,232,1,0,0,0,33,234,1,0,0,0,35,237,1,0,0,0,37,240,1,0,0,0,
        39,242,1,0,0,0,41,245,1,0,0,0,43,248,1,0,0,0,45,251,1,0,0,0,47,254,
        1,0,0,0,49,257,1,0,0,0,51,260,1,0,0,0,53,262,1,0,0,0,55,264,1,0,
        0,0,57,267,1,0,0,0,59,270,1,0,0,0,61,273,1,0,0,0,63,276,1,0,0,0,
        65,278,1,0,0,0,67,280,1,0,0,0,69,282,1,0,0,0,71,284,1,0,0,0,73,286,
        1,0,0,0,75,288,1,0,0,0,77,290,1,0,0,0,79,292,1,0,0,0,81,294,1,0,
        0,0,83,296,1,0,0,0,85,305,1,0,0,0,87,320,1,0,0,0,89,326,1,0,0,0,
        91,332,1,0,0,0,93,337,1,0,0,0,95,346,1,0,0,0,97,350,1,0,0,0,99,357,
        1,0,0,0,101,369,1,0,0,0,103,376,1,0,0,0,105,379,1,0,0,0,107,385,
        1,0,0,0,109,388,1,0,0,0,111,393,1,0,0,0,113,400,1,0,0,0,115,406,
        1,0,0,0,117,410,1,0,0,0,119,413,1,0,0,0,121,416,1,0,0,0,123,422,
        1,0,0,0,125,427,1,0,0,0,127,436,1,0,0,0,129,442,1,0,0,0,131,451,
        1,0,0,0,133,457,1,0,0,0,135,464,1,0,0,0,137,472,1,0,0,0,139,477,
        1,0,0,0,141,482,1,0,0,0,143,489,1,0,0,0,145,495,1,0,0,0,147,504,
        1,0,0,0,149,508,1,0,0,0,151,152,5,105,0,0,152,153,5,110,0,0,153,
        154,5,116,0,0,154,2,1,0,0,0,155,156,5,102,0,0,156,157,5,108,0,0,
        157,158,5,111,0,0,158,159,5,97,0,0,159,160,5,116,0,0,160,4,1,0,0,
        0,161,162,5,115,0,0,162,163,5,116,0,0,163,164,5,114,0,0,164,165,
        5,105,0,0,165,166,5,110,0,0,166,167,5,103,0,0,167,6,1,0,0,0,168,
        169,5,99,0,0,169,170,5,104,0,0,170,171,5,97,0,0,171,172,5,114,0,
        0,172,8,1,0,0,0,173,174,5,98,0,0,174,175,5,111,0,0,175,176,5,111,
        0,0,176,177,5,108,0,0,177,10,1,0,0,0,178,179,5,116,0,0,179,180,5,
        114,0,0,180,181,5,117,0,0,181,182,5,101,0,0,182,12,1,0,0,0,183,184,
        5,102,0,0,184,185,5,97,0,0,185,186,5,108,0,0,186,187,5,115,0,0,187,
        188,5,101,0,0,188,14,1,0,0,0,189,191,7,0,0,0,190,189,1,0,0,0,191,
        192,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,16,1,0,0,0,194,196,
        7,0,0,0,195,194,1,0,0,0,196,197,1,0,0,0,197,195,1,0,0,0,197,198,
        1,0,0,0,198,199,1,0,0,0,199,201,5,46,0,0,200,202,7,0,0,0,201,200,
        1,0,0,0,202,203,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,18,1,
        0,0,0,205,209,5,39,0,0,206,210,8,1,0,0,207,208,5,92,0,0,208,210,
        9,0,0,0,209,206,1,0,0,0,209,207,1,0,0,0,210,211,1,0,0,0,211,212,
        5,39,0,0,212,20,1,0,0,0,213,219,5,34,0,0,214,218,8,2,0,0,215,216,
        5,92,0,0,216,218,9,0,0,0,217,214,1,0,0,0,217,215,1,0,0,0,218,221,
        1,0,0,0,219,217,1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,219,
        1,0,0,0,222,223,5,34,0,0,223,22,1,0,0,0,224,225,5,43,0,0,225,24,
        1,0,0,0,226,227,5,45,0,0,227,26,1,0,0,0,228,229,5,42,0,0,229,28,
        1,0,0,0,230,231,5,47,0,0,231,30,1,0,0,0,232,233,5,37,0,0,233,32,
        1,0,0,0,234,235,5,43,0,0,235,236,5,43,0,0,236,34,1,0,0,0,237,238,
        5,45,0,0,238,239,5,45,0,0,239,36,1,0,0,0,240,241,5,61,0,0,241,38,
        1,0,0,0,242,243,5,43,0,0,243,244,5,61,0,0,244,40,1,0,0,0,245,246,
        5,45,0,0,246,247,5,61,0,0,247,42,1,0,0,0,248,249,5,42,0,0,249,250,
        5,61,0,0,250,44,1,0,0,0,251,252,5,47,0,0,252,253,5,61,0,0,253,46,
        1,0,0,0,254,255,5,61,0,0,255,256,5,61,0,0,256,48,1,0,0,0,257,258,
        5,33,0,0,258,259,5,61,0,0,259,50,1,0,0,0,260,261,5,62,0,0,261,52,
        1,0,0,0,262,263,5,60,0,0,263,54,1,0,0,0,264,265,5,62,0,0,265,266,
        5,61,0,0,266,56,1,0,0,0,267,268,5,60,0,0,268,269,5,61,0,0,269,58,
        1,0,0,0,270,271,5,38,0,0,271,272,5,38,0,0,272,60,1,0,0,0,273,274,
        5,124,0,0,274,275,5,124,0,0,275,62,1,0,0,0,276,277,5,91,0,0,277,
        64,1,0,0,0,278,279,5,93,0,0,279,66,1,0,0,0,280,281,5,40,0,0,281,
        68,1,0,0,0,282,283,5,41,0,0,283,70,1,0,0,0,284,285,5,123,0,0,285,
        72,1,0,0,0,286,287,5,125,0,0,287,74,1,0,0,0,288,289,5,46,0,0,289,
        76,1,0,0,0,290,291,5,44,0,0,291,78,1,0,0,0,292,293,5,58,0,0,293,
        80,1,0,0,0,294,295,5,59,0,0,295,82,1,0,0,0,296,297,5,47,0,0,297,
        298,5,47,0,0,298,302,1,0,0,0,299,301,8,3,0,0,300,299,1,0,0,0,301,
        304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,84,1,0,0,0,304,302,
        1,0,0,0,305,306,5,47,0,0,306,307,5,42,0,0,307,311,1,0,0,0,308,310,
        9,0,0,0,309,308,1,0,0,0,310,313,1,0,0,0,311,312,1,0,0,0,311,309,
        1,0,0,0,312,314,1,0,0,0,313,311,1,0,0,0,314,315,5,42,0,0,315,316,
        5,47,0,0,316,317,1,0,0,0,317,318,6,42,0,0,318,86,1,0,0,0,319,321,
        7,4,0,0,320,319,1,0,0,0,321,322,1,0,0,0,322,320,1,0,0,0,322,323,
        1,0,0,0,323,324,1,0,0,0,324,325,6,43,0,0,325,88,1,0,0,0,326,327,
        5,99,0,0,327,328,5,108,0,0,328,329,5,97,0,0,329,330,5,115,0,0,330,
        331,5,115,0,0,331,90,1,0,0,0,332,333,5,109,0,0,333,334,5,97,0,0,
        334,335,5,105,0,0,335,336,5,110,0,0,336,92,1,0,0,0,337,338,5,105,
        0,0,338,339,5,110,0,0,339,340,5,104,0,0,340,341,5,101,0,0,341,342,
        5,114,0,0,342,343,5,105,0,0,343,344,5,116,0,0,344,345,5,115,0,0,
        345,94,1,0,0,0,346,347,5,104,0,0,347,348,5,97,0,0,348,349,5,115,
        0,0,349,96,1,0,0,0,350,351,5,109,0,0,351,352,5,101,0,0,352,353,5,
        116,0,0,353,354,5,104,0,0,354,355,5,111,0,0,355,356,5,100,0,0,356,
        98,1,0,0,0,357,358,5,99,0,0,358,359,5,111,0,0,359,360,5,110,0,0,
        360,361,5,115,0,0,361,362,5,116,0,0,362,363,5,114,0,0,363,364,5,
        117,0,0,364,365,5,99,0,0,365,366,5,116,0,0,366,367,5,111,0,0,367,
        368,5,114,0,0,368,100,1,0,0,0,369,370,5,99,0,0,370,371,5,114,0,0,
        371,372,5,101,0,0,372,373,5,97,0,0,373,374,5,116,0,0,374,375,5,101,
        0,0,375,102,1,0,0,0,376,377,5,111,0,0,377,378,5,102,0,0,378,104,
        1,0,0,0,379,380,5,112,0,0,380,381,5,114,0,0,381,382,5,105,0,0,382,
        383,5,110,0,0,383,384,5,116,0,0,384,106,1,0,0,0,385,386,5,105,0,
        0,386,387,5,102,0,0,387,108,1,0,0,0,388,389,5,101,0,0,389,390,5,
        108,0,0,390,391,5,115,0,0,391,392,5,101,0,0,392,110,1,0,0,0,393,
        394,5,114,0,0,394,395,5,101,0,0,395,396,5,112,0,0,396,397,5,101,
        0,0,397,398,5,97,0,0,398,399,5,116,0,0,399,112,1,0,0,0,400,401,5,
        117,0,0,401,402,5,110,0,0,402,403,5,116,0,0,403,404,5,105,0,0,404,
        405,5,108,0,0,405,114,1,0,0,0,406,407,5,102,0,0,407,408,5,111,0,
        0,408,409,5,114,0,0,409,116,1,0,0,0,410,411,5,105,0,0,411,412,5,
        110,0,0,412,118,1,0,0,0,413,414,5,100,0,0,414,415,5,111,0,0,415,
        120,1,0,0,0,416,417,5,105,0,0,417,418,5,110,0,0,418,419,5,112,0,
        0,419,420,5,117,0,0,420,421,5,116,0,0,421,122,1,0,0,0,422,423,5,
        115,0,0,423,424,5,101,0,0,424,425,5,108,0,0,425,426,5,102,0,0,426,
        124,1,0,0,0,427,428,5,97,0,0,428,429,5,98,0,0,429,430,5,115,0,0,
        430,431,5,116,0,0,431,432,5,114,0,0,432,433,5,97,0,0,433,434,5,99,
        0,0,434,435,5,116,0,0,435,126,1,0,0,0,436,437,5,102,0,0,437,438,
        5,105,0,0,438,439,5,110,0,0,439,440,5,97,0,0,440,441,5,108,0,0,441,
        128,1,0,0,0,442,443,5,111,0,0,443,444,5,118,0,0,444,445,5,101,0,
        0,445,446,5,114,0,0,446,447,5,114,0,0,447,448,5,105,0,0,448,449,
        5,100,0,0,449,450,5,101,0,0,450,130,1,0,0,0,451,452,5,115,0,0,452,
        453,5,117,0,0,453,454,5,112,0,0,454,455,5,101,0,0,455,456,5,114,
        0,0,456,132,1,0,0,0,457,458,5,112,0,0,458,459,5,117,0,0,459,460,
        5,98,0,0,460,461,5,108,0,0,461,462,5,105,0,0,462,463,5,99,0,0,463,
        134,1,0,0,0,464,465,5,112,0,0,465,466,5,114,0,0,466,467,5,105,0,
        0,467,468,5,118,0,0,468,469,5,97,0,0,469,470,5,116,0,0,470,471,5,
        101,0,0,471,136,1,0,0,0,472,473,5,108,0,0,473,474,5,105,0,0,474,
        475,5,115,0,0,475,476,5,116,0,0,476,138,1,0,0,0,477,478,5,100,0,
        0,478,479,5,105,0,0,479,480,5,99,0,0,480,481,5,116,0,0,481,140,1,
        0,0,0,482,483,5,114,0,0,483,484,5,101,0,0,484,485,5,116,0,0,485,
        486,5,117,0,0,486,487,5,114,0,0,487,488,5,110,0,0,488,142,1,0,0,
        0,489,490,5,98,0,0,490,491,5,114,0,0,491,492,5,101,0,0,492,493,5,
        97,0,0,493,494,5,107,0,0,494,144,1,0,0,0,495,496,5,99,0,0,496,497,
        5,111,0,0,497,498,5,110,0,0,498,499,5,116,0,0,499,500,5,105,0,0,
        500,501,5,110,0,0,501,502,5,117,0,0,502,503,5,101,0,0,503,146,1,
        0,0,0,504,505,5,118,0,0,505,506,5,97,0,0,506,507,5,114,0,0,507,148,
        1,0,0,0,508,512,7,5,0,0,509,511,7,6,0,0,510,509,1,0,0,0,511,514,
        1,0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,513,150,1,0,0,0,514,512,
        1,0,0,0,11,0,192,197,203,209,217,219,302,311,322,512,1,6,0,0
    ]

class OOPsyLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    OOPSY_TYPE_INT = 1
    OOPSY_TYPE_FLOAT = 2
    OOPSY_TYPE_STRING = 3
    OOPSY_TYPE_CHAR = 4
    OOPSY_TYPE_BOOL = 5
    BOOL_LITERAL_TRUE = 6
    BOOL_LITERAL_FALSE = 7
    INT_LITERAL = 8
    FLOAT_LITERAL = 9
    CHAR_LITERAL = 10
    STRING_LITERAL = 11
    PLUS_OPERATOR = 12
    MINUS_OPERATOR = 13
    MULTIPLY_OPERATOR = 14
    DIVIDE_OPERATOR = 15
    MODULO_OPERATOR = 16
    INCREMENT_OPERATOR = 17
    DECREMENT_OPERATOR = 18
    ASSIGNMENT_OPERATOR = 19
    ADDITION_ASSIGNMENT_OPERATOR = 20
    SUBTRACTION_ASSIGNMENT_OPERATOR = 21
    MULTIPLICATION_ASSIGNMENT_OPERATOR = 22
    DIVISION_ASSIGNMENT_OPERATOR = 23
    EQUAL_OPERATOR = 24
    UNEQUAL_OPERATOR = 25
    GREATER_OPERATOR = 26
    LESSER_OPERATOR = 27
    GREATER_EQ_OPERATOR = 28
    LESSER_EQ_OPERATOR = 29
    AND_OPERATOR = 30
    OR_OPERATOR = 31
    LEFT_BRACKET = 32
    RIGHT_BRACKET = 33
    LEFT_PARENTHESIS = 34
    RIGHT_PARENTHESIS = 35
    LEFT_BRACE = 36
    RIGHT_BRACE = 37
    DOT_SEPARATOR = 38
    COMMA_SEPARATOR = 39
    COLON_SEPARATOR = 40
    SEMICOLON_SEPARATOR = 41
    LINE_COMMENT = 42
    BLOCK_COMMENT = 43
    WHITESPACE = 44
    CLASS_KEYWORD = 45
    MAIN_KEYWORD = 46
    INHERITS_KEYWORD = 47
    HAS_ATTRIBUTE_KEYWORD = 48
    METHOD_KEYWORD = 49
    CONSTRUCTOR_KEYWORD = 50
    CREATE_KEYWORD = 51
    OF_STATEMENT = 52
    PRINT_KEYWORD = 53
    IF_KEYWORD = 54
    ELSE_KEYWORD = 55
    REPEAT_KEYWORD = 56
    UNTIL_KEYWORD = 57
    FOR_KEYWORD = 58
    IN_KEYWORD = 59
    DO_KEYWORD = 60
    INPUT_STATEMENT = 61
    SELF_KEYWORD = 62
    ABSTRACT_KEYWORD = 63
    FINAL_KEYWORD = 64
    OVERRIDE_KEYWORD = 65
    SUPER_CALL = 66
    PUBLIC_MODIFIER = 67
    PRIVATE_MODIFIER = 68
    LIST_TYPE = 69
    DICTIONARY_TYPE = 70
    RETURN_STATEMENT = 71
    BREAK_STATEMENT = 72
    CONTINUE_STATEMENT = 73
    VAR_KEYWORD = 74
    IDENTIFIER = 75

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'float'", "'string'", "'char'", "'bool'", "'true'", 
            "'false'", "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", "'--'", 
            "'='", "'+='", "'-='", "'*='", "'/='", "'=='", "'!='", "'>'", 
            "'<'", "'>='", "'<='", "'&&'", "'||'", "'['", "']'", "'('", 
            "')'", "'{'", "'}'", "'.'", "','", "':'", "';'", "'class'", 
            "'main'", "'inherits'", "'has'", "'method'", "'constructor'", 
            "'create'", "'of'", "'print'", "'if'", "'else'", "'repeat'", 
            "'until'", "'for'", "'in'", "'do'", "'input'", "'self'", "'abstract'", 
            "'final'", "'override'", "'super'", "'public'", "'private'", 
            "'list'", "'dict'", "'return'", "'break'", "'continue'", "'var'" ]

    symbolicNames = [ "<INVALID>",
            "OOPSY_TYPE_INT", "OOPSY_TYPE_FLOAT", "OOPSY_TYPE_STRING", "OOPSY_TYPE_CHAR", 
            "OOPSY_TYPE_BOOL", "BOOL_LITERAL_TRUE", "BOOL_LITERAL_FALSE", 
            "INT_LITERAL", "FLOAT_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", 
            "PLUS_OPERATOR", "MINUS_OPERATOR", "MULTIPLY_OPERATOR", "DIVIDE_OPERATOR", 
            "MODULO_OPERATOR", "INCREMENT_OPERATOR", "DECREMENT_OPERATOR", 
            "ASSIGNMENT_OPERATOR", "ADDITION_ASSIGNMENT_OPERATOR", "SUBTRACTION_ASSIGNMENT_OPERATOR", 
            "MULTIPLICATION_ASSIGNMENT_OPERATOR", "DIVISION_ASSIGNMENT_OPERATOR", 
            "EQUAL_OPERATOR", "UNEQUAL_OPERATOR", "GREATER_OPERATOR", "LESSER_OPERATOR", 
            "GREATER_EQ_OPERATOR", "LESSER_EQ_OPERATOR", "AND_OPERATOR", 
            "OR_OPERATOR", "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_PARENTHESIS", 
            "RIGHT_PARENTHESIS", "LEFT_BRACE", "RIGHT_BRACE", "DOT_SEPARATOR", 
            "COMMA_SEPARATOR", "COLON_SEPARATOR", "SEMICOLON_SEPARATOR", 
            "LINE_COMMENT", "BLOCK_COMMENT", "WHITESPACE", "CLASS_KEYWORD", 
            "MAIN_KEYWORD", "INHERITS_KEYWORD", "HAS_ATTRIBUTE_KEYWORD", 
            "METHOD_KEYWORD", "CONSTRUCTOR_KEYWORD", "CREATE_KEYWORD", "OF_STATEMENT", 
            "PRINT_KEYWORD", "IF_KEYWORD", "ELSE_KEYWORD", "REPEAT_KEYWORD", 
            "UNTIL_KEYWORD", "FOR_KEYWORD", "IN_KEYWORD", "DO_KEYWORD", 
            "INPUT_STATEMENT", "SELF_KEYWORD", "ABSTRACT_KEYWORD", "FINAL_KEYWORD", 
            "OVERRIDE_KEYWORD", "SUPER_CALL", "PUBLIC_MODIFIER", "PRIVATE_MODIFIER", 
            "LIST_TYPE", "DICTIONARY_TYPE", "RETURN_STATEMENT", "BREAK_STATEMENT", 
            "CONTINUE_STATEMENT", "VAR_KEYWORD", "IDENTIFIER" ]

    ruleNames = [ "OOPSY_TYPE_INT", "OOPSY_TYPE_FLOAT", "OOPSY_TYPE_STRING", 
                  "OOPSY_TYPE_CHAR", "OOPSY_TYPE_BOOL", "BOOL_LITERAL_TRUE", 
                  "BOOL_LITERAL_FALSE", "INT_LITERAL", "FLOAT_LITERAL", 
                  "CHAR_LITERAL", "STRING_LITERAL", "PLUS_OPERATOR", "MINUS_OPERATOR", 
                  "MULTIPLY_OPERATOR", "DIVIDE_OPERATOR", "MODULO_OPERATOR", 
                  "INCREMENT_OPERATOR", "DECREMENT_OPERATOR", "ASSIGNMENT_OPERATOR", 
                  "ADDITION_ASSIGNMENT_OPERATOR", "SUBTRACTION_ASSIGNMENT_OPERATOR", 
                  "MULTIPLICATION_ASSIGNMENT_OPERATOR", "DIVISION_ASSIGNMENT_OPERATOR", 
                  "EQUAL_OPERATOR", "UNEQUAL_OPERATOR", "GREATER_OPERATOR", 
                  "LESSER_OPERATOR", "GREATER_EQ_OPERATOR", "LESSER_EQ_OPERATOR", 
                  "AND_OPERATOR", "OR_OPERATOR", "LEFT_BRACKET", "RIGHT_BRACKET", 
                  "LEFT_PARENTHESIS", "RIGHT_PARENTHESIS", "LEFT_BRACE", 
                  "RIGHT_BRACE", "DOT_SEPARATOR", "COMMA_SEPARATOR", "COLON_SEPARATOR", 
                  "SEMICOLON_SEPARATOR", "LINE_COMMENT", "BLOCK_COMMENT", 
                  "WHITESPACE", "CLASS_KEYWORD", "MAIN_KEYWORD", "INHERITS_KEYWORD", 
                  "HAS_ATTRIBUTE_KEYWORD", "METHOD_KEYWORD", "CONSTRUCTOR_KEYWORD", 
                  "CREATE_KEYWORD", "OF_STATEMENT", "PRINT_KEYWORD", "IF_KEYWORD", 
                  "ELSE_KEYWORD", "REPEAT_KEYWORD", "UNTIL_KEYWORD", "FOR_KEYWORD", 
                  "IN_KEYWORD", "DO_KEYWORD", "INPUT_STATEMENT", "SELF_KEYWORD", 
                  "ABSTRACT_KEYWORD", "FINAL_KEYWORD", "OVERRIDE_KEYWORD", 
                  "SUPER_CALL", "PUBLIC_MODIFIER", "PRIVATE_MODIFIER", "LIST_TYPE", 
                  "DICTIONARY_TYPE", "RETURN_STATEMENT", "BREAK_STATEMENT", 
                  "CONTINUE_STATEMENT", "VAR_KEYWORD", "IDENTIFIER" ]

    grammarFileName = "OOPsy.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


